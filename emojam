#!/usr/bin/env python3

# Emojam - An Emoji keyboard for Linux
# Using gtk+
# (c) 2022 Sam Foster

# Requires Google's emoji fonts:
# Noto Color Emoji
# Package for Google's emoji font:
# fonts-noto-color-emoji
# /usr/share/fonts/truetype/noto/NotoColorEmoji.ttf

# Dumb idea: subclass Gtk.Button to make my own button type,
# with metadata like category, tags and favorite (bool).
# (and blackjack and hookers!)
# That way I can use the metadata as filter, so it can
# filter by category, or by favorite, or recently used

# Another maybe less dumb idea: make method in emojis.py that takes emoji name,
# returns dict entry. Use dict entry to store metadata.
# eg: favorite status, category is already there
# That way the filter can just filter by that metadata.


import gi
import emojis

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk

class EmojamWindow(Gtk.Window):
    def __init__(self):
        super().__init__(title="Emojam")    # new Gtk.Window
        self.set_border_width(10)
        self.set_default_size(500, 500)
        self.set_can_focus(False)
        # init emoji related stuff
        self.set_css_style()    # for our emoji fonts
        self.init_emojis()  # load emojis
        # Initialize composite layout for the window
        box_layout = self.make_larger_layout()
        self.add(box_layout)
        self.show_all()

    def make_larger_layout(self):
        box_layout = Gtk.VBox(spacing=10)
        # make the search entry
        searchbox = self.make_search_box()
        # add searchbox to the top of the VBox
        box_layout.pack_start(searchbox, expand=False, fill=True, padding=0)
        # make group buttons label
        group_buttons_label = Gtk.Label(label="Categories")
        group_buttons_label.set_alignment(0.0, 0.0)
        group_buttons_label.show()
        box_layout.pack_start(group_buttons_label, expand=False, fill=False, padding=0)
        # make groups buttons area 
        groups_button_box = self.make_groups_buttons()
        # add groups buttons just below search box
        box_layout.pack_start(groups_button_box, expand=False, fill=True, padding=0)
        # Make flowbox label, showing which group is selected
        self.selected_group_label = Gtk.Label(label="All")
        self.selected_group_label.set_alignment(0.0, 0.0)
        self.selected_group_label.show()
        box_layout.pack_start(self.selected_group_label, expand=False, fill=True, padding=0)
        # make the emoji flowbox area
        scrolled_flowbox = self.make_a_flowbox_layout()
        # add flowbox to the bottom of the VBox
        box_layout.pack_end(scrolled_flowbox, expand=True, fill=True, padding=0)
        return box_layout

    def make_a_flowbox_layout(self):
        # flowbox, for resizable
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_policy(Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
        flowbox = Gtk.FlowBox()
        flowbox.set_valign(Gtk.Align.START)
        flowbox.set_max_children_per_line(30)
        flowbox.set_selection_mode(Gtk.SelectionMode.NONE)
        self.flowbox = flowbox
        self.populate_flowbox_with_emojis(self.flowbox)
        scrolled.add(self.flowbox)
        return scrolled

    def init_emojis(self):
        self.emo = emojis.Emojis("emojis.csv")

    def make_search_box(self):
        #entry = Gtk.Entry()
        entry = Gtk.SearchEntry()
        entry.connect("changed", self.search_box_changed, entry)
        entry.show()
        return entry

    def make_group_button(self, s_button_name):
        s_button_label = self.emo.emoji_from_group(s_button_name)
        button = Gtk.Button(label=s_button_label)
        button.set_tooltip_text(s_button_name)
        button.set_name(s_button_name)
        return button


    def make_groups_buttons(self):
        # returns a gtk box containing ze buttons
        scrolled = Gtk.ScrolledWindow()
        scrolled.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        #scrolled.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.AUTOMATIC)

        #groups_bbox = Gtk.HButtonBox()
        groups_bbox = Gtk.HBox()
        #groups_bbox.set_margin_bottom(10)
        #groups_bbox.set_margin_top(10)
        #groups_bbox.set_layout(Gtk.ButtonBoxStyle.EDGE)
        # Make "all" (global) button - show all emojis
        button = self.make_group_button("All")
        button.connect("clicked", self.clicked_group_button)
        groups_bbox.pack_start(button, expand=False, fill=True, padding=0)
        # Make favorites button
        button = self.make_group_button("Favorites")
        button.connect("clicked", self.clicked_group_button)
        groups_bbox.pack_start(button, expand=False, fill=True, padding=0)
        # make recently used button
        button = self.make_group_button("Recently Used")
        button.connect("clicked", self.clicked_group_button)
        groups_bbox.pack_start(button, expand=False, fill=True, padding=0)
        # Put smileys-emotion button near the front of the list
        button = self.make_group_button("Smileys-Emotion")
        button.connect("clicked", self.clicked_group_button)
        groups_bbox.pack_start(button, expand=False, fill=True, padding=0)
        
        for s_group in self.emo.d_emojis.keys():
            # Make button for emoji gorup
            # Pack it into groups_bbox
            if s_group == "Smileys-Emotion":
                pass
            else:
                button = self.make_group_button(s_group)
                button.connect("clicked", self.clicked_group_button)
                groups_bbox.pack_start(button, expand=False, fill=True, padding=0)
        #return groups_bbox
        #scrolled.set_margin_bottom(10)
        #scrolled.set_margin_top(10)
        #scrolled.add(groups_bbox)
        scrolled.set_propagate_natural_height(True)
        scrolled.add(groups_bbox)
        return scrolled

    def flowbox_group_filter(self, fb_child, s_group):
        """ Filter by group or category """
        if s_group == 'All':
            return True
        for button in fb_child:
            if s_group in self.emo.emoji_group_from_name(button.get_name()):
                return True
            else:
                return False
        return False # should never really get here

    def flowbox_search_filter(self, fb_child, text):
        # from example at:
        # https://stackoverflow.com/questions/55828169/how-to-filter-gtk-flowbox-children-with-gtk-entrysearch
        if text=='': return True # empty search
        #if text in [label.get_name() for label in fb_child]:
        for button in fb_child:
            if text in button.get_name().lower():
                #print(button.get_name())
                return True
            elif text in self.emo.emoji_group_from_name(button.get_name()).lower():
                return True
            else:
                return False
        #if text in [button.get_name() for button in fb_child]:
        #    return True
        #else:
        #    return False
        return False    # should never really get here

    def search_box_changed(self, widget, user_data):
        search_text = widget.get_text().lower()
        self.flowbox.set_filter_func(self.flowbox_search_filter, search_text)
        #print(search_text)
        pass

    def make_emoji_button(self, s_emoji_name: str):
        s_emoji = self.emo.emoji_from_name(s_emoji_name)
        button = Gtk.Button(label=s_emoji)
        button.set_tooltip_text(s_emoji_name)
        button.set_name(s_emoji_name)
        button.connect("clicked", self.clicked_emoji_button)
        return button

    def set_css_style(self):
        #css = 'button { background-color: #f00; }'
        css = '                                    \
            button {                               \
                font-family: Noto Color Emoji;     \
                font-size: 150%;                   \
            }'
        css_provider = Gtk.CssProvider()
        css_provider.load_from_data(css.encode())
        context = Gtk.StyleContext()
        screen = Gdk.Screen.get_default()
        context.add_provider_for_screen(screen, css_provider,
                                    Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

    def clicked_group_button(self, widget):
        s_group: str = widget.get_name()
        self.set_active_group(s_group)

    def set_active_group(self, s_group):
        #s_group: str = widget.get_label()
        #print(f"Setting group to: {s_group}")
        self.flowbox.set_filter_func(self.flowbox_group_filter, s_group)
        self.selected_group_label.set_text(s_group)

    def clicked_emoji_button(self, widget):
        s_emoji: str = widget.get_label()
        s_emoji_name: str = widget.get_name()
        s_emoji_group: str = self.emo.emoji_group_from_name(s_emoji_name)
        print(f"{s_emoji} :{s_emoji_name}: {s_emoji_group}")

    def populate_flowbox_with_emojis(self, flowbox):
        #for s_emoji_name in self.emo.d_emojis['Smileys-Emotion']:
        #    button = self.make_emoji_button(s_emoji_name)
        #    flowbox.add(button)
        # load all emojis:
        for s_group in self.emo.d_emojis.keys():
            label = Gtk.Label(label=s_group)
            #label.set_single_line_mode(True)
            #label.set_halign(Gtk.Align.END)
            label.show()
            #flowbox.add(label)
            for s_emoji_name in self.emo.d_emojis[s_group]:
                button = self.make_emoji_button(s_emoji_name)
                flowbox.add(button)

def main():
    win = EmojamWindow()
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()

if __name__ == "__main__":
    main()


